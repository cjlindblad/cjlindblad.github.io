{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/building-some-ruby-source-code","result":{"data":{"markdownRemark":{"id":"b901b6c6-3966-5540-848a-76c9cf9fc320","html":"<p>In <a href=\"reading-some-ruby-source-code\">my last post</a>, I fumbled around in the Ruby source code and took a look at an internal function that is not exposed via the public Ruby API. Itâ€™s called <code class=\"language-text\">ary_make_hash</code> and turns an array into a hash where each key-value pair has the same value.</p>\n<p>In imaginary Ruby, it would work like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">irb<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>make_hash <span class=\"token comment\">#(Doesn't exist)</span>\n  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>As a learning exercise, letâ€™s alter the Ruby source so that the example above would actually work!</p>\n<h3 id=\"building-ruby\" style=\"position:relative;\"><a href=\"#building-ruby\" aria-label=\"building ruby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Ruby</h3>\n<p>First, we gotta be able to build Ruby. Thereâ€™s a <a href=\"https://github.com/ruby/ruby/blob/master/README.md#how-to-compile-and-install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guide</a> in the repo, but that just resulted in a wall of C compiler errors sprinkled with complaints about the openssl lib. I was just about to desperately try it on a virtual Linux box instead (Iâ€™m running macOS), when I found <a href=\"https://github.com/ko1/rubyhackchallenge/blob/master/EN/2_mri_structure.md#exercise-build-mri-and-install-built-binaries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a>.</p>\n<p>A detailed guide for getting started on hacking the MRI (the standard Ruby C implementation)! This worked like a charm on the latest stable branch (ruby<em>2</em>7). I feel like this should be on the official README. Possible pull request coming up!</p>\n<h3 id=\"hacking-ruby\" style=\"position:relative;\"><a href=\"#hacking-ruby\" aria-label=\"hacking ruby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hacking Ruby</h3>\n<p>As we found out last time, the mapping of Ruby method name to C function is located at the bottom of each relevant source file. For example, hereâ€™s the line for <a href=\"https://github.com/ruby/ruby/blob/master/array.c#L8052\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Array.to_h</a>. So, letâ€™s pop in a new line and map it to <code class=\"language-text\">ary_make_hash</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cArray<span class=\"token punctuation\">,</span> <span class=\"token string\">\"make_hash\"</span><span class=\"token punctuation\">,</span> ary_make_hash<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Iâ€™m not sure what the last argument does, but the regular <code class=\"language-text\">to_h</code> passes <code class=\"language-text\">0</code>, so weâ€™ll probably be fine using that as well.</p>\n<p>Try to run it and.. ðŸ’¥ BAM ðŸ’¥</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">irb<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>make_hash\n\n<span class=\"token punctuation\">[</span><span class=\"token constant\">BUG</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">Segmentation</span> fault at <span class=\"token number\">0x0000000000000020</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token constant\">Followed</span> by a million lines of traces <span class=\"token keyword\">and</span> error messages<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A segfault pops up! Not really used to these, but it seems like weâ€™re trying to read a part of the memory that we shouldnâ€™t.</p>\n<p>However, if we assign the expression to a variable, it works just fine.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">irb<span class=\"token operator\">></span> hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>make_hash\nirb<span class=\"token operator\">></span></code></pre></div>\n<p>Of course, if we try to do anything with the <code class=\"language-text\">hash</code> variable, everything blows up again. Letâ€™s look at the source for <code class=\"language-text\">ary_make_hash</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">ary_make_hash</span><span class=\"token punctuation\">(</span>VALUE ary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    VALUE hash <span class=\"token operator\">=</span> <span class=\"token function\">ary_tmp_hash_new</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ary_add_hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Make a temp hash, you say? That sounds suspicious. Letâ€™s dig deeper:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">ary_tmp_hash_new</span><span class=\"token punctuation\">(</span>VALUE ary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> size <span class=\"token operator\">=</span> <span class=\"token function\">RARRAY_LEN</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    VALUE hash <span class=\"token operator\">=</span> <span class=\"token function\">rb_hash_new_with_size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">RBASIC_CLEAR_CLASS</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It looks like we should do fine if we just use the call to <code class=\"language-text\">rb_hash_new_with_size</code> without calling the clear function afterward. Letâ€™s make a new function, and call it <code class=\"language-text\">rb_ary_make_hash</code> to indicate that itâ€™s visible to Ruby (with the <code class=\"language-text\">rb_</code> prefix):</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">rb_ary_make_hash</span><span class=\"token punctuation\">(</span>VALUE ary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    VALUE hash <span class=\"token operator\">=</span> <span class=\"token function\">rb_hash_new_with_size</span><span class=\"token punctuation\">(</span><span class=\"token function\">RARRAY_LEN</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ary_add_hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And swap the method mapping for our new function:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cArray<span class=\"token punctuation\">,</span> <span class=\"token string\">\"make_hash\"</span><span class=\"token punctuation\">,</span> rb_ary_make_hash<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"running-ruby\" style=\"position:relative;\"><a href=\"#running-ruby\" aria-label=\"running ruby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Ruby</h3>\n<p>Moment of truth coming up. Will it work?</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">irb<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>make_hash\n  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It actually does!</p>\n<p>This is of course pretty pointless, but we figured out how to build, hack and run our own version of Ruby! Next time, we might be able to try something useful!</p>","fields":{"slug":"/posts/building-some-ruby-source-code","tagSlugs":["/tag/ruby/"]},"frontmatter":{"date":"2020-07-10T12:40:32.169Z","description":"Where we add a pointless method to the Ruby language!","tags":["Ruby"],"title":"Building some Ruby source code","socialImage":null}}},"pageContext":{"slug":"/posts/building-some-ruby-source-code"}}}